alias k=kubectl
echo 'alias k=kubectl' >> ~/.bashrc

kubectl -h # help
kubectl logs -l name=<lable-name>

Cluster Management

kubectl cluster-info
kubectl version
kubectl config view
kubectl config current-context
kubectl config get-contexts
kubectl config use-context <cluster> # set the default context
kubectl api-resources
kubectl api-versions
kubectl get all --all-namespaces

Namespace:

kubectl get namespace <namespace-name>
kubectl describe/create/edit/delete namespace <namespace-name>
kubectl top namespace <namespace-name>

Node:

kubectl get node
kubectl label node
kubectl describe node <node-name>
kubectl delete node <node-name>
kubectl top node <node-name>
kubectl describe nodes | grep Allocated -A 5
kubectl get pods -o wide | grep <node-name>
kubectl annotate node <node-name>
kubectl taint node <node-name> # to taint node
kubectl drain node <node-name> # to prepare it for maintenance
kubectl cordon node <node-name> # make it unschedulable
kubectl uncordon node <node-name> # make it schedulable

Pod:

kubectl get pod
kubectl get pods -o=json
kubectl get pods -o=yaml
kubectl get pods -o=wide
kubectl get pod -n=<namespace>
kubectl get pod --namespace=<namespace>
kubectl get pods --show-labels
kubectl get pods --field-selector=status.phase=Running
kubectl create -f ./pod.json
kubectl describe/create/edit/delete pod <pod-name>
kubectl label pod <pod-name>
kubectl annotate pod <pod-name> <annotation>
kubectl exec <pod-name> -c <container-name> <command> # to run a command on a container inside a pod
kubectl exec -it <pod-name> /bin/sh # open an interactive shell
kubectl exec <pod-name> -- cat /log/app.log
kubectl replace --force -f ./pod-definition.yaml
kubectl port-forward <pod-name> <listen-port>:<forward-port>

Deploments:

kubectl get deployment
kubectl describe/create/edit/delete deployment <deployment-name>
kubectl rollout status deployment <deployment-name>
kubectl rollout undo deployment <deployment-name>
kubectl set image deployment/<deployment-name> <container-name>=image:<new-image-version>
kubectl replace --force -f ./deployment.yaml

Replication Controller:

kubectl get rc
kubectl get rc --namespace=<namespace-name>

ReplicaSets:

kubectl get replicasets
kubectl describe replicasets <replicaset-name>
kubectl scale --replicas=n

Daemonsets:

kubectl get daemonset
kubectl create/edit/delete daemonset <daemonset-name>
kubectl rollout daemonset
kubectl describe ds <daemonset-name> -n <namespace-name>

StatefulSet:

kubectl get statefulset
kubectl delete statefulset/<statefulset-name> --cascade=false

Secret:

kubectl get secrets
kubectl describe secrets
kubectl create/delete secret <secret-name>

Services:

kubectl get services
kubectl describe services
kubectl expose deployment <deployment-nane> # expose deployment as a kubernetes service
kubectl edit services

Service Accounts:

kubectl get serviceaccounts
kubectl describe serviceaccounts
kubectl replace serviceaccount
kubectl delete serviceaccount <serviceaccount>

Events:

kubectl get events
kubectl get events --field-selector type=warning
kubectl get events --field-selector type=!Normal # filder abnormal events
kubectl get events --field-selector involvedObject.kind!=Pod
kubectl get events --sort-by=.metadata.creationTimestamp

Logs:

kubectl logs <pod-name>
kubectl logs <pod-name> pod.log # outputs the logs to the file
kubectl logs --previous <pod-name>
kubectl logs --since=6h <pod-name>
kubectl logs --tail=50 <pod-name> # recent 50 lines
kubectl logs -f <pod-name> # print logs and follow new logs
kubectl logs -c <container-name> <pod-name> # container logs
kubectl logs -f <service-name> -c <container-name> # container logs


